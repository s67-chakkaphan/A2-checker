String game = "main";
int row = 8;
int col = 8;
int cellsize = 100;
boolean player;
int[][] board = new int[8][8]; 
boolean selected = false;
int selectedRow = -1;
int selectedCol = -1;

void setup(){
    size(1000,800);
    background(225);
    
    for(int i=0;i<8;i++){
         for(int j=0;j<8;j++){
         print(board[i][j]);
         }
    }
    
    draw_board();
    play_button();
    load_button();
}

void draw(){
    if(game == "main"){
        background(225);
        draw_board();
        play_button();
        load_button();
    }
    else if(game == "play"){
        background(225);
        draw_board();
        save_button();
        exit_button();
        draw_piece();
        turn(player);
    }
}

void mousePressed(){
    if(game == "main"){
        if (mouseX>840 && mouseX<960 && mouseY>20 && mouseY <70){
            game = "play";
            random_first();
            board_default();
        }
    }
    int r = mouseX / cellsize;
    int c = mouseY / cellsize;
    
    if(game == "play"){
        if (mouseX>840 && mouseX<960 && mouseY>120 && mouseY <170){
            game = "main";
            random_first();
            board_clear();
            selectedRow = -1;  
            selectedCol = -1;
            selected = false;
        }else if(r<8 && c<8){
            if (!selected && board[r][c] != 0 && valid_piece(r, c)) {
                    selectedRow = r;
                    selectedCol = c;
                    selected = true;
            } 
        }
    }
}

void draw_board(){
    int i = 0;
    
    while(i<col){
        int j = 0;
        while(j<row){
            if((i+j)%2 == 0){
                fill(247,215,158);
            }else{
                fill(144,116,104);
            }
            rect(i*cellsize,j*cellsize,cellsize,cellsize);
            if (i == selectedRow && j == selectedCol) {
                fill(0, 255, 0, 150);  // สีแดงโปร่งใส
                rect(i * cellsize, j * cellsize, cellsize, cellsize);
            }
            j++;
        }
        i++;
    }
}

void play_button(){  
  fill(0,255,0);
  stroke(0);
  strokeWeight(1);
  rect(840,20,120,50);
  textSize(20);
  fill(0);
  textAlign(CENTER,CENTER);
  text("Play",900,45);
}

void load_button(){
    fill(0,100,255);
    stroke(0);
    strokeWeight(1);
    rect(840,120,120,50);
    textSize(20);
    fill(0);
    textAlign(CENTER,CENTER);
    text("Load",900,145);
}

void save_button(){
    fill(0,255,255);
    stroke(0);
    strokeWeight(1);
    rect(840,20,120,50);
    textSize(20);
    fill(0);
    textAlign(CENTER,CENTER);
    text("Save",900,45);
}
void exit_button(){
    fill(255,0,0);
    stroke(0);
    strokeWeight(1);
    rect(840,120,120,50);
    textSize(20);
    fill(0);
    textAlign(CENTER,CENTER);
    text("Exit",900,145);
}

void black_text(){
    stroke(0);
    strokeWeight(1);
    textSize(28);
    fill(0);
    textAlign(CENTER,CENTER);
    text("Turn : White",900,750);    
}

void white_text(){
    stroke(0);
    strokeWeight(1);
    textSize(28);
    fill(0);
    textAlign(CENTER,CENTER);
    text("Turn : Black",900,750);    
}

void random_first(){
    int r = int(random(1,3));
    if(r == 1){
      player = true;
    }
    else{
      player = false;
    }
}

void turn(boolean player){
    if(player == true){
        white_text();
    }
    else{
        black_text();
    }
}

void board_default(){
    int i = 0;
    while(i<8){
        if(i%2 == 0){
            board[i][0] = 2;
            board[i][6] = 1;
        }
        else{
            board[i][1] = 2;
            board[i][7] = 1;
        }
        i++;
    }
}

void board_clear(){
    for(int i=0;i<8;i++){
         for(int j=0;j<8;j++){
             board[i][j]= 0;
         }
    }
}

void draw_piece(){
    int r = 0;
    while(r<8){
        int c = 0;
        while(c<8){
              if (board[r][c] == 1) {
              fill(255); 
              ellipse(r * cellsize + cellsize / 2, c * cellsize + cellsize / 2, cellsize * 0.8, cellsize * 0.8);
            } else if (board[r][c] == 2) {
              fill(0); 
              ellipse(r * cellsize + cellsize / 2, c * cellsize + cellsize / 2, cellsize * 0.8, cellsize * 0.8);
            }  
            c++;
        }
        r++;
    }
}

boolean valid_piece(int r, int c) {
    if (player && board[r][c] == 2) return true;  
    if (!player && board[r][c] == 1) return true; 
    return false;
}
