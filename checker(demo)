String game = "main";
int row = 8;
int col = 8;
int cellsize = 100;
boolean player;
int[][] board = new int[8][8]; 
boolean pieceSelected = false;
int selectedRow = -1;
int selectedCol = -1;

void setup(){
    size(1000,800);
    background(225);
    
    for(int i=0;i<8;i++){
         for(int j=0;j<8;j++){
         print(board[i][j]);
         }
    }
    
    draw_board();
    play_button();
    load_button();
}

void draw(){
    if(game == "main"){
        background(225);
        draw_board();
        play_button();
        load_button();
    }
    else if(game == "play"){
        background(225);
        draw_board();
        save_button();
        exit_button();
        draw_pieces();
        turn(player);
    }
}

void mousePressed() {
    int r = mouseX / cellsize;
    int c = mouseY / cellsize;

    if (game == "main") {
        if (mouseX > 840 && mouseX < 960 && mouseY > 20 && mouseY < 70) {  
            game = "play";
            random_first();
            board_default();  
        }
    }

    if (game == "play") {
        if (mouseX > 840 && mouseX < 960 && mouseY > 120 && mouseY < 170) {
            game = "main";
            random_first();
            board_reset();
            selectedRow = -1;  
            selectedCol = -1;  
            pieceSelected = false;  
        } else if (r < 8 && c < 8) {
            if (!pieceSelected && board[r][c] != 0 && validPiece(r, c)) {
                selectedRow = r;
                selectedCol = c;
                pieceSelected = true;
                println("Selected piece at: (" + r + ", " + c + ")");
            } 
            else if (pieceSelected) {
                if (validMove(selectedRow, selectedCol, r, c)) {
                    int piece = board[selectedRow][selectedCol];
                    // Check move direction for normal pieces (1 and 2)
                    if ((piece == 1 && c < selectedCol) || (piece == 2 && c > selectedCol)) { 
                        int midRow = (selectedRow + r) / 2;
                        int midCol = (selectedCol + c) / 2;
                        if (abs(selectedRow - r) == 2 && abs(selectedCol - c) == 2 && board[midRow][midCol] != 0) {
                            board[midRow][midCol] = 0; 
                        }

                        if (c == 0 && piece == 1) {
                            board[r][c] = 3; 
                        } else if (c == 7 && piece == 2) {
                            board[r][c] = 4; 
                        } else {
                            board[r][c] = piece;
                        }

                    } 
                    else if (piece == 3 || piece == 4) {
                       board[r][c] = piece; 
                      int rowDirection = (r > selectedRow) ? 1 : -1;
                      int colDirection = (c > selectedCol) ? 1 : -1;
                      int midRow = selectedRow + rowDirection;
                      int midCol = selectedCol + colDirection;                  
                      while (midRow != r && midCol != c) {
                          if ((piece == 3 && (board[midRow][midCol] == 2 || board[midRow][midCol] == 4)) || 
                              (piece == 4 && (board[midRow][midCol] == 1 || board[midRow][midCol] == 3))) {
                              board[midRow][midCol] = 0;
                              println("Captured piece at: (" + midRow + ", " + midCol + ")");
                              break;
                          }
                          midRow += rowDirection;
                          midCol += colDirection;
                      }
                 }
                    board[selectedRow][selectedCol] = 0;
                    pieceSelected = false;  
                    selectedRow = -1;  
                    selectedCol = -1;  
                    player = !player;  
                } else {
                    pieceSelected = false;  
                    selectedRow = -1;  
                    selectedCol = -1;  
                }
            }
        }
    }
}

void draw_pieces(){
   for (int i = 0; i < 8; i++) {
        for (int j = 0; j < 8; j++) {
            draw_piece(i, j);
        }
    }
}

void draw_board(){
    int i = 0;
    
    while(i<col){
        int j = 0;
        while(j<row){
            if((i+j)%2 == 0){
                fill(247,215,158);
            }else{
                fill(144,116,104);
            }
            rect(i*cellsize,j*cellsize,cellsize,cellsize);
            if (i == selectedRow && j == selectedCol) {
                fill(0, 255, 0, 150);  
                rect(i * cellsize, j * cellsize, cellsize, cellsize);
            }
            j++;
        }
        i++;
    }
}

void board_default(){
    int i = 0;
    while(i<8){
        if(i%2 == 0){
            board[i][1] = 2;
            board[i][7] = 1;
        }
        else{
            board[i][0] = 2;
            board[i][6] = 1;
        }
        i++;
    }
}

void play_button(){  
  fill(0,255,0);
  stroke(0);
  strokeWeight(1);
  rect(840,20,120,50);
  textSize(20);
  fill(0);
  textAlign(CENTER,CENTER);
  text("Play",900,45);
}

void load_button(){
    fill(0,100,255);
    stroke(0);
    strokeWeight(1);
    rect(840,120,120,50);
    textSize(20);
    fill(0);
    textAlign(CENTER,CENTER);
    text("Load",900,145);
}

void save_button(){
    fill(0,255,255);
    stroke(0);
    strokeWeight(1);
    rect(840,20,120,50);
    textSize(20);
    fill(0);
    textAlign(CENTER,CENTER);
    text("Save",900,45);
}
void exit_button(){
    fill(255,0,0);
    stroke(0);
    strokeWeight(1);
    rect(840,120,120,50);
    textSize(20);
    fill(0);
    textAlign(CENTER,CENTER);
    text("Exit",900,145);
}

void black_text(){
    stroke(0);
    strokeWeight(1);
    textSize(28);
    fill(0);
    textAlign(CENTER,CENTER);
    text("Turn : black",900,750);    
}

void white_text(){
    stroke(0);
    strokeWeight(1);
    textSize(28);
    fill(0);
    textAlign(CENTER,CENTER);
    text("Turn : white",900,750);    
}

void random_first(){
    int r = int(random(1,3));
    if(r == 1){
      player = true;
    }
    else{
      player = false;
    }
}

void turn(boolean player){
    if(player == true){
        white_text();
    }
    else{
        black_text();
    }
}

void board_reset(){
    int i = 0;
    while(i<8){
        if(i%2 == 0){
            board[i][1] = 2;
            board[i][7] = 1;
        }
        else{
            board[i][0] = 2;
            board[i][6] = 1;
        }
        i++;
    }
}

void board_clear(){
    for(int i=0;i<8;i++){
         for(int j=0;j<8;j++){
             board[i][j]= 0;
         }
    }
}

void draw_piece(int r,int c){
    if (board[r][c] == 1) {
        fill(255); 
        ellipse(r * cellsize + cellsize / 2, c * cellsize + cellsize / 2, cellsize * 0.8, cellsize * 0.8);
    } else if (board[r][c] == 2) {
        fill(0); 
        ellipse(r * cellsize + cellsize / 2, c * cellsize + cellsize / 2, cellsize * 0.8, cellsize * 0.8);
    }
    else if (board[r][c] == 3) {
        fill(255); 
        rect(r * cellsize + (cellsize - 70) / 2, c * cellsize + (cellsize - 70) / 2, 70, 70);
    }
    else if (board[r][c] == 4) {
        fill(0); 
        rect(r * cellsize + (cellsize - 70) / 2, c * cellsize + (cellsize - 70) / 2, 70, 70);
    }
}

boolean validPiece(int r, int c) {
    if (player && (board[r][c] == 1 || board[r][c] == 3)) return true; 
    if (!player && (board[r][c] == 2 || board[r][c] == 4)) return true; 
    return false;
}

boolean validMove(int fromRow, int fromCol, int toRow, int toCol) {
    if (board[toRow][toCol] == 0) {        
        if (board[fromRow][fromCol] == 1) {            
            if (toCol > fromCol) {
                return false; 
            }
            if (toCol < fromCol && (toRow == fromRow - 1 || toRow == fromRow + 1)) {
                return true;
            }
        } 
        else if (board[fromRow][fromCol] == 2) {
            if (toCol < fromCol) {
                return false; 
            }
            if (toCol > fromCol && (toRow == fromRow - 1 || toRow == fromRow + 1)) {
                return true; 
            }
        }        
        if (board[fromRow][fromCol] == 3 || board[fromRow][fromCol] == 4) {
            if (abs(fromRow - toRow) == abs(fromCol - toCol) && (toRow != fromRow && toCol != fromCol)) {
                return true; 
            }
        }
    }
    if (abs(fromRow - toRow) == 2 && abs(fromCol - toCol) == 2) {
        int midRow = (fromRow + toRow) / 2;
        int midCol = (fromCol + toCol) / 2;

        if (board[fromRow][fromCol] == 1) {
            if (board[midRow][midCol] == 2 || board[midRow][midCol] == 4) {
                return true;
            }
        }    
        else if (board[fromRow][fromCol] == 2) {
            if (board[midRow][midCol] == 1 || board[midRow][midCol] == 3) {
                return true; 
            }
        }
        else if (board[fromRow][fromCol] == 3) {
            if (board[midRow][midCol] == 2 || board[midRow][midCol] == 4) {
                return true; 
            }
        } else if (board[fromRow][fromCol] == 4) {
            if (board[midRow][midCol] == 1 || board[midRow][midCol] == 3) {
                return true; 
            }
        }
    }    
    return false;
}
